// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  firstname            String             @db.VarChar(255)
  lastname             String             @db.VarChar(255)
  email                String             @unique @db.VarChar(255)
  password             String             @db.VarChar(255)
  image_url            String?            @db.VarChar(500)
  role                 Role               @default(USER)
  city                 String?            @db.VarChar(255)
  zip_code             String?            @db.VarChar(15)
  refresh_token        RefreshToken[]
  reviews              Review[]
  orders               Order[]
  favorite_categories  FavoriteCategory[]
  favorite_universes   FavoriteUniverse[]
  resetPassword        String?            @unique
  resetPasswordExpires BigInt?            @db.BigInt
}

model Review {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  content    String   @db.VarChar(500)
  published  Boolean  @default(false)
  rating     Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int
}

model Product {
  id          Int      @id @default(autoincrement())
  stock       Int
  name        String   @db.VarChar(255)
  description String   @db.VarChar(500)
  image_url   String   @db.VarChar(255)
  price       Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  orders      Order[]
  reviews     Review[]
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id Int
  universe    Universe @relation(fields: [universe_id], references: [id], onDelete: Cascade)
  universe_id Int
}

model Order {
  id               Int      @id @default(autoincrement())
  order_date       DateTime @default(now())
  archeving_date   DateTime @updatedAt
  product_quantity Int
  product          Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id       Int
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
}

model Category {
  id                  Int                @id @default(autoincrement())
  name                String             @db.VarChar(255)
  image_url           String?            @db.VarChar(255)
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  favorite_categories FavoriteCategory[]
  products            Product[]
}

model Universe {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar(255)
  image_url          String?            @db.VarChar(255)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  favorite_universes FavoriteUniverse[]
  products           Product[]
}

model FavoriteCategory {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id Int
}

model FavoriteUniverse {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  universe    Universe @relation(fields: [universe_id], references: [id], onDelete: Cascade)
  universe_id Int
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  revoked     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
